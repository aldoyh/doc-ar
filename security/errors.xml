<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- splitted from ./index.xml, last change in rev 1.66 -->
  <chapter xml:id="security.errors" xmlns="http://docbook.org/ns/docbook">
   <title>الإبلاغ عن الأخطاء</title>
   <para>
    مع أمان PHP، هناك جانبان للإبلاغ عن الأخطاء. أحدهما
    مفيد لزيادة الأمان، والآخر ضار.
   </para>
   <para>
    تتضمن تكتيكات الهجوم القياسية إنشاء ملف تعريف لنظام عن طريق تغذيته
    ببيانات غير صحيحة، والتحقق من أنواع الأخطاء وسياقاتها
    التي يتم إرجاعها. يتيح هذا لمخترق النظام التحقيق
    للحصول على معلومات حول الخادم، لتحديد نقاط الضعف المحتملة.
    على سبيل المثال، إذا كان المهاجم قد جمع معلومات حول صفحة
    بناءً على إرسال نموذج سابق، فقد يحاول تجاوز
    المتغيرات أو تعديلها:
    <example>
     <title>مهاجمة المتغيرات بصفحة HTML مخصصة</title>
     <programlisting role="html">
<![CDATA[
<form method="post" action="attacktarget?username=badfoo&amp;password=badfoo">
<input type="hidden" name="username" value="badfoo" />
<input type="hidden" name="password" value="badfoo" />
</form>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    يمكن أن تكون أخطاء PHP التي يتم إرجاعها عادةً مفيدة جدًا لمطور
    يحاول تصحيح برنامج نصي، مما يشير إلى أشياء مثل
    الدالة أو الملف الذي فشل، وملف PHP الذي فشل فيه،
    ورقم السطر الذي حدث فيه الفشل. هذه كلها
    معلومات يمكن استغلالها. ليس من غير المألوف لمطور php
    أن يستخدم <function>show_source</function> أو
    <function>highlight_string</function> أو
    <function>highlight_file</function> كإجراء تصحيح، ولكن في
    موقع مباشر، يمكن أن يكشف هذا عن متغيرات مخفية، وبناء جملة غير محدد،
    ومعلومات خطرة أخرى. خطير بشكل خاص هو تشغيل
    كود من مصادر معروفة مع معالجات تصحيح مدمجة، أو استخدام
    تقنيات تصحيح شائعة. إذا تمكن المهاجم من تحديد
    التقنية العامة التي تستخدمها، فقد يحاول اختراق صفحة بالقوة الغاشمة،
    عن طريق إرسال سلاسل تصحيح شائعة مختلفة:
    <example>
     <title>استغلال متغيرات التصحيح الشائعة</title>
     <programlisting role="html">
<![CDATA[
<form method="post" action="attacktarget?errors=Y&amp;showerrors=1&amp;debug=1">
<input type="hidden" name="errors" value="Y" />
<input type="hidden" name="showerrors" value="1" />
<input type="hidden" name="debug" value="1" />
</form>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    بغض النظر عن طريقة معالجة الأخطاء، فإن القدرة على فحص
    نظام بحثًا عن الأخطاء يؤدي إلى تزويد المهاجم بمزيد من
    المعلومات.
   </para>
   <para>
    على سبيل المثال، يشير نمط خطأ PHP العام إلى أن النظام
    يعمل بـ PHP. إذا كان المهاجم ينظر إلى صفحة <literal>.html</literal>، و
    أراد فحص الواجهة الخلفية (للبحث عن نقاط ضعف معروفة في
    النظام)، من خلال تغذيته ببيانات خاطئة قد يتمكن من
    تحديد أن النظام تم بناؤه بـ PHP.
   </para>
   <para>
    يمكن أن يشير خطأ الدالة إلى ما إذا كان النظام قد يعمل بمحرك
    قاعدة بيانات معين، أو يعطي أدلة حول كيفية برمجة أو
    تصميم صفحة الويب. يتيح هذا إجراء تحقيق أعمق في
    منافذ قاعدة البيانات المفتوحة، أو للبحث عن أخطاء أو نقاط ضعف
    محددة في صفحة ويب. من خلال تغذية أجزاء مختلفة من البيانات السيئة، على سبيل المثال،
    يمكن للمهاجم تحديد ترتيب المصادقة في برنامج نصي،
    (من أخطاء رقم السطر) وكذلك التحقيق في الثغرات التي
    قد يتم استغلالها في مواقع مختلفة في البرنامج النصي.
   </para>
   <para>
    يمكن أن يشير خطأ نظام الملفات أو خطأ PHP عام إلى الأذونات التي
    يملكها خادم الويب، بالإضافة إلى بنية وتنظيم
    الملفات على خادم الويب. يمكن أن يؤدي كود الخطأ المكتوب من قبل المطور إلى تفاقم
    هذه المشكلة، مما يؤدي إلى سهولة استغلال المعلومات "المخفية"
    سابقًا.
   </para>
   <para>
    هناك ثلاثة حلول رئيسية لهذه المشكلة. الأول هو
    فحص جميع الدوال، ومحاولة التعويض عن معظم
    الأخطاء. الثاني هو تعطيل الإبلاغ عن الأخطاء تمامًا
    على الكود قيد التشغيل. الثالث هو استخدام دوال معالجة
    الأخطاء المخصصة في PHP لإنشاء معالج الأخطاء الخاص بك. اعتمادًا
    على سياسة الأمان الخاصة بك، قد تجد أن جميع الثلاثة قابلة
    للتطبيق على حالتك.
   </para>
   <para>
    إحدى طرق اكتشاف هذه المشكلة مسبقًا هي استخدام
    <function>error_reporting</function> الخاصة بـ PHP، لمساعدتك على
    تأمين كودك وإيجاد استخدام المتغيرات الذي قد يكون خطيرًا.
    عن طريق اختبار كودك، قبل النشر، باستخدام <constant>E_ALL</constant>،
    يمكنك بسرعة العثور على المناطق التي قد تكون فيها متغيراتك مفتوحة للتسميم
    أو التعديل بطرق أخرى. بمجرد أن تكون مستعدًا للنشر،
    يجب عليك إما تعطيل الإبلاغ عن الأخطاء تمامًا عن طريق تعيين
    <function>error_reporting</function> إلى 0، أو إيقاف عرض
    الأخطاء باستخدام خيار &php.ini; <literal>display_errors</literal>،
    لعزل كودك عن الفحص. إذا اخترت القيام بالأخير،
    يجب عليك أيضًا تحديد المسار إلى ملف السجل الخاص بك باستخدام
    توجيه ini <literal>error_log</literal>، وتشغيل
    <literal>log_errors</literal>.
    <example>
     <title>العثور على متغيرات خطرة باستخدام E_ALL</title>
     <programlisting role="php">
<![CDATA[
<?php
if ($username) {  // Not initialized or checked before usage
    $good_login = 1;
}
if ($good_login == 1) { // If above test fails, not initialized or checked before usage
    readfile ("/highly/sensitive/data/index.html");
}
?>
]]>
     </programlisting>
    </example>
   </para>
  </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
